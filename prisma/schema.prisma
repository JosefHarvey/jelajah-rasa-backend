// 1. Konfigurasi Koneksi Database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. Konfigurasi Prisma Client
generator client {
  provider = "prisma-client-js"
}

/* ============================
   ENUMS
   ============================ */
enum ArticleType {
  STORY
  REGION_PROFILE
}

/* ============================
   MODELS (existing + tambahan minimal)
   ============================ */

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())

  // EXISTING
  comments  Comment[]
  ratings   Rating[]

  // NEW
  articles  Article[] @relation("ArticleAuthor")
  reviews   Review[]
}

model Region {
  id                      Int       @id @default(autoincrement())
  name                    String    @unique
  description             String
  cuisine_characteristics String

  // NEW: untuk "Profil Citarasa"
  profileContent  String?
  profileImageUrl String?
  slug            String?  @unique

  // EXISTING
  foods        Food[]
  restaurants  Restaurant[]

  // NEW
  articles     Article[]
}

model Food {
  id                Int       @id @default(autoincrement())
  name              String
  historyAndMeaning String?
  cookingMethod     String?
  quickFacts        String?
  latitude          Float?
  longitude         Float?
  influencerComment String?
  commentSource     String?

  regionId Int
  region   Region    @relation(fields: [regionId], references: [id], onDelete: Cascade)

  // EXISTING
  comments    Comment[]
  ratings     Rating[]
  restaurants FoodOnRestaurant[]

  // NEW: konten “Referensi Kuliner Lokal”
  intro     String?
  body      String?
  imageUrl  String?
  cityName  String?

  // NEW: opsional tautkan ke artikel
  articleId Int?
  article   Article?  @relation(fields: [articleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now()) // <- penting untuk migrasi aman
}

model Restaurant {
  id             Int       @id @default(autoincrement())
  name           String
  address        String
  googleMapsLink String?
  regionId       Int
  region         Region    @relation(fields: [regionId], references: [id], onDelete: Cascade)
  foods          FoodOnRestaurant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now()) // <- penting untuk migrasi aman
}

model FoodOnRestaurant {
  foodId       Int
  food         Food       @relation(fields: [foodId], references: [id], onDelete: Cascade)
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([foodId, restaurantId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodId    Int
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)

  // Tetap: 1 user, 1 komentar per makanan
  @@unique([userId, foodId])
}

model Rating {
  id     Int  @id @default(autoincrement())
  value  Int
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodId Int
  food   Food @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@unique([userId, foodId])
}

model Suggestion {
  id            Int      @id @default(autoincrement())
  foodName      String
  origin        String
  description   String
  suggesterName String?
  status        String   @default("PENDING")
  createdAt     DateTime @default(now())
}

/* ============================
   Tambahan baru untuk kebutuhan #2/#3/#4/#6
   ============================ */

model Article {
  id            Int          @id @default(autoincrement())
  title         String
  slug          String       @unique
  content       String
  type          ArticleType  @default(STORY)
  coverImageUrl String?
  publishedAt   DateTime?

  // Relasi opsional ke Region & Author
  regionId  Int?
  region    Region?      @relation(fields: [regionId], references: [id])
  authorId  Int?
  author    User?        @relation("ArticleAuthor", fields: [authorId], references: [id])

  // Kaitan ke Review & Food
  reviews   Review[]
  foods     Food[]

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  articleId Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Larang 1 user review artikel yang sama dua kali (kebutuhan #3)
  @@unique([articleId, userId])
}

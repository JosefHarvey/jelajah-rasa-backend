// Blok ini memberitahu Prisma bahwa kita menggunakan database PostgreSQL
// dan alamatnya ada di file .env
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Blok ini akan membuat "kurir" khusus untuk kita nanti
generator client {
  provider = "prisma-client-js"
}

// --- MODEL DATABASE FINAL ---

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relasi: Satu User bisa punya banyak Comment dan Rating
  comments  Comment[]
  ratings   Rating[]
}

model Region {
  id                      Int      @id @default(autoincrement())
  name                    String   @unique
  description             String
  cuisine_characteristics String

  // Relasi: Satu Region bisa punya banyak Food dan Restaurant
  foods                   Food[]
  restaurants             Restaurant[]
}

model Food {
  id                Int      @id @default(autoincrement())
  name              String
  historyAndMeaning String?
  cookingMethod     String?
  quickFacts        String?
  latitude          Float?
  longitude         Float?
  influencerComment String?
  commentSource     String?

  // Relasi ke Region
  regionId Int
  region   Region @relation(fields: [regionId], references: [id], onDelete: Cascade)

  // Relasi: Satu Food bisa punya banyak Comment dan Rating
  comments Comment[]
  ratings  Rating[]

  // Relasi Many-to-Many dengan Restaurant
  restaurants FoodOnRestaurant[]
}

// Model baru untuk tempat makan
model Restaurant {
  id             Int      @id @default(autoincrement())
  name           String
  address        String
  googleMapsLink String?

  // Relasi ke Region
  regionId Int
  region   Region @relation(fields: [regionId], references: [id], onDelete: Cascade)

  // Relasi Many-to-Many dengan Food
  foods FoodOnRestaurant[]
}

// Model penghubung untuk Food dan Restaurant (Many-to-Many)
model FoodOnRestaurant {
  foodId       Int
  food         Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([foodId, restaurantId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  // Relasi ke User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi ke Food
  foodId Int
  food   Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
}

model Rating {
  id    Int @id @default(autoincrement())
  value Int

  // Relasi ke User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi ke Food
  foodId Int
  food   Food @relation(fields: [foodId], references: [id], onDelete: Cascade)

  // Aturan agar 1 user hanya bisa memberi 1 rating untuk 1 makanan
  @@unique([userId, foodId])
}

model Suggestion {
  id            Int      @id @default(autoincrement())
  foodName      String
  origin        String
  description   String
  suggesterName String?
  status        String   @default("PENDING")
  createdAt     DateTime @default(now())
}